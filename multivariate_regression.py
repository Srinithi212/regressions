# -*- coding: utf-8 -*-
"""Multivariate regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v6vj6u4pJLa8A1CuVRlXqMCUEWABkJHn
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

from google.colab import drive
drive.mount('/gdrive')

path='/gdrive/My Drive/machineLearning/hw/'

raw_data=pd.read_csv(path+'chennai_house_multivariate_train (1).csv')
raw_data.head()

raw_data.plot(kind='scatter',x='INT_SQFT',y='SALES_PRICE')

data=(raw_data-raw_data.mean())/(raw_data.max()-raw_data.min())
data.head()

data.insert(0,'bias',1)
data.head()

x=data.iloc[:, 0:17] #iloc[rows, columns]
x.head()

y=data.iloc[:,17:]
y.head()

theta=np.matrix([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
X=np.matrix(x)
Y=np.matrix(y)

x.shape,y.shape,theta.shape

def computeError(x,y,theta):
  inner=np.power(((x*theta.T)-y),2)
  return np.sum(inner)/(2*len(x))

computeError(X,Y,theta)

Learn_rate=0.5
iters=250
def gradientDescent(x,y,theta,Learn_rate,iters):
  temp=np.matrix(np.zeros(theta.shape))
  parameters=theta.shape[1]
  cost=[]

  for i in range(iters):
    error=(x*theta.T)-y

    for j in range(parameters):
      gradient=np.multiply(error,x[:,j])
      temp[0,j]=theta[0,j]-((Learn_rate/len(x))*np.sum(gradient))

    theta=temp
    cost_iter=computeError(x,y,theta)
    cost.append(cost_iter)

  return theta,cost

new_theta,cost=gradientDescent(X,Y,theta,Learn_rate,iters)

new_theta

cost

model_price=X* new_theta.T

model_price

from sklearn.metrics import mean_absolute_error

Error = mean_absolute_error(model_price,y)
Accuracy=1-Error

print('Error=[]%',format(round(Error*100,2)))
print('Accuracy=[]%',format(round(Accuracy*100,2)))

def predict(new_theta,accuracy):
  size=float(input("Enter the size of the house in sqft: "))
  size=(size-raw_data.Size.mean()/(raw_data.Size.max()-raw_data.Size.min()))
  price=(new_theta[0,0]+(new_theta[0,1]*size))
  Predicted_price=(price*(raw_data.Price.max()-raw_data.Price.min()))+(raw_data.Price.mean())
  price_at_max_accuracy=(Predicted_price*(1/accuracy))
  price_range=price_at_max_accuracy-Predicted_price
  return Predicted_price,price_range

Predicted_price,price_range=predict(new_theta,Accuracy)
print('Your house cost is '+str(round(Predicted_price*(1/100000),2))+' Lakhs (+ or -) '+str(round(price_range,2)))